public class ArithmeticOperatorExercise01 {
    public static void main(String[] args) {
        // 1.面试题1
//        int i = 1;
//        i = i++;
//        System.out.println(i); // 1
        /**
         * 结果是1是因为Java中后置递增运算符（i++）的行为。让我们逐步分析这行代码 i = i++; 来理解为什么会得到这个结果。
         *
         * 初始化：int i = 1; 将变量 i 初始化为1。
         *
         * 后置递增运算符 (i++) 的工作机制：
         *
         * 表达式 i++ 使用 i 的当前值（此时是1），然后再进行递增。
         * i++ 表达式的值是 i 的当前值，也就是1。
         * 递增操作将在表达式求值后执行，所以 i 将递增到2。
         * 赋值操作：
         *
         * 表达式 i++ 的值是1，所以 i = i++ 等效于 i = 1。
         * 赋值操作完成后，i 被赋值为1。
         * 递增操作：
         *
         * 虽然 i 在 i++ 表达式中递增到2，但这个值没有被使用，因为已经进行了赋值操作。
         * 所以，最终 System.out.println(i); 输出的是1，而不是2。
         */

        int i = 1;
        i = ++i;
        System.out.println(i); // 2

        /**
         * 结果是2是因为前置递增运算符（++i）的行为。让我们逐步分析这行代码 i = ++i; 来理解为什么会得到这个结果。
         *
         * 初始化：int i = 1; 将变量 i 初始化为1。
         *
         * 前置递增运算符 (++i) 的工作机制：
         *
         * 表达式 ++i 首先将 i 的值递增1，所以 i 从1变成2。
         * 然后，表达式 ++i 的值是递增后的值，也就是2。
         * 赋值操作：
         *
         * 表达式 ++i 的值是2，所以 i = ++i 等效于 i = 2。
         * 输出：
         *
         * 赋值操作完成后，i 被赋值为2。
         * System.out.println(i); 输出的是2。
         * 因此，最终输出结果是2。
         */

    }
}